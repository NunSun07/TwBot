import socket
import requests
import time
import json
import datetime
import os
import pytz
import logging
import threading
from typing import Dict, List, Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TwitchFACEITBot:
    """
    Twitch –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è FACEIT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    
    def __init__(self):
        # Cooldown –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !elo
        self.elo_cooldown = 5   # —Å–µ–∫—É–Ω–¥–∏
        self.last_elo_time = 0
        self.pending_elo_thread = None

        # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        self.SERVER = "irc.twitch.tv"
        self.PORT = 6667  # SSL –ø–æ—Ä—Ç
        self.TOKEN = os.environ.get("TWITCH_OAUTH_TOKEN")
        self.NICK = os.environ.get("TWITCH_BOT_NICK")
        self.CHANNEL = os.environ.get("TWITCH_CHANNEL")
        self.FACEIT_API_KEY = os.environ.get("FACEIT_API_KEY")
        self.FACEIT_NICK = os.environ.get("FACEIT_NICK")

        self.TWITCH_CLIENT_ID = os.environ.get("TWITCH_CLIENT_ID")        # –∑ ENV
        self.TWITCH_CLIENT_SECRET = os.environ.get("TWITCH_CLIENT_SECRET")  # –∑ ENV
        self.TWITCH_APP_TOKEN = None
        self.TOKEN_EXPIRES_AT = 0  # —á–∞—Å, –∫–æ–ª–∏ —Ç–æ–∫–µ–Ω –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (timestamp)

        self.ELO_FILE = os.getenv("ELO_FILE_PATH", "elo_history.json")
        self.TIMEZONE = pytz.timezone('Europe/Kiev')

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö ENV
        required_env = [
            'TWITCH_OAUTH_TOKEN', 'TWITCH_BOT_NICK', 'TWITCH_CHANNEL',
            'FACEIT_API_KEY', 'FACEIT_NICK', 'TWITCH_CLIENT_ID', 'TWITCH_APP_TOKEN'
        ]
        for var in required_env:
            if not os.environ.get(var):
                logging.warning(f"‚ö†Ô∏è ENV –∑–º—ñ–Ω–Ω–∞ {var} –Ω–µ –∑–∞–¥–∞–Ω–∞!")

        # IRC –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        self.irc = socket.socket()
        self.irc.settimeout(30)
        self.running = False

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—É Elo
        if not os.path.exists(self.ELO_FILE):
            initial_data = [{
                "elo": 0,
                "timestamp": datetime.datetime.now(self.TIMEZONE).isoformat()
            }]
            with open(self.ELO_FILE, 'w', encoding='utf-8') as f:
                json.dump(initial_data, f, indent=2, ensure_ascii=False)
            logging.info(f"–§–∞–π–ª {self.ELO_FILE} —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º Elo = 0")

        logging.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Elo —Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏–π.")

        # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –æ–±–Ω—É–ª–µ–Ω–Ω—è –æ 4 —Ä–∞–Ω–∫—É
        self.schedule_daily_reset()
        logging.info("–©–æ–¥–µ–Ω–Ω–µ –æ–±–Ω—É–ª–µ–Ω–Ω—è Elo –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –Ω–∞ 04:00")

    def refresh_twitch_token(self):
        """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω Twitch —á–µ—Ä–µ–∑ Client Credentials"""
        import time
        try:
            url = (
                f"https://id.twitch.tv/oauth2/token"
                f"?client_id={self.TWITCH_CLIENT_ID}"
                f"&client_secret={self.TWITCH_CLIENT_SECRET}"
                f"&grant_type=client_credentials"
            )
            response = requests.post(url, timeout=10)
            response.raise_for_status()
            data = response.json()

            self.TWITCH_APP_TOKEN = data['access_token']
            self.TOKEN_EXPIRES_AT = time.time() + data['expires_in'] - 60  # –º—ñ–Ω—É—Å 60 —Å–µ–∫ –∑–∞–ø–∞—Å
            logging.info(f"üîë –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω Twitch, expires_in={data['expires_in']} —Å–µ–∫")

        except Exception as e:
            logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Twitch: {e}")

    def ensure_twitch_token(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Ç–æ–∫–µ–Ω —â–µ –¥—ñ–π—Å–Ω–∏–π, —ñ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
        import time
        if not self.TWITCH_APP_TOKEN or time.time() >= self.TOKEN_EXPIRES_AT:
            logging.info("üîÑ –¢–æ–∫–µ–Ω Twitch –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ...")
            self.refresh_twitch_token()

    def reset_daily_stats(self):
        """–û–±–Ω—É–ª—è—î –¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (Win/Lose/–∑–º—ñ–Ω–∏ Elo)"""
        if not os.path.exists(self.ELO_FILE):
            return

        try:
            with open(self.ELO_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)

            last_elo = history[-1]['elo'] if history else 0
            new_entry = {
                "elo": last_elo,
                "timestamp": datetime.datetime.now(self.TIMEZONE).isoformat()
            }

            with open(self.ELO_FILE, 'w', encoding='utf-8') as f:
                json.dump([new_entry], f, indent=2, ensure_ascii=False)

            logging.info("üîÑ –î–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –æ 4 —Ä–∞–Ω–∫—É")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def schedule_daily_reset(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Ç–∞–π–º–µ—Ä, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î reset_daily_stats —â–æ–¥–Ω—è –æ 4 —Ä–∞–Ω–∫—É"""
        now = datetime.datetime.now(self.TIMEZONE)
        next_reset = now.replace(hour=4, minute=0, second=0, microsecond=0)
        if now >= next_reset:
            next_reset += datetime.timedelta(days=1)

        delay = (next_reset - now).total_seconds()
        import threading
        threading.Timer(delay, self._daily_reset_callback).start()

    def _daily_reset_callback(self):
        """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ç–∞–π–º–µ—Ä–æ–º, –æ–±–Ω—É–ª—è—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ñ –ø–ª–∞–Ω—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–±–Ω—É–ª–µ–Ω–Ω—è"""
        self.reset_daily_stats()
        self.schedule_daily_reset()  # –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–±–Ω—É–ª–µ–Ω–Ω—è

    def connect_to_twitch(self) -> bool:
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitch IRC"""
        try:
            self.irc = socket.socket()
            self.irc.settimeout(30)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            self.irc.connect((self.SERVER, self.PORT))
            
            # –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
            self.irc.send(f"PASS {self.TOKEN}\r\n".encode('utf-8'))
            self.irc.send(f"NICK {self.NICK}\r\n".encode('utf-8'))
            self.irc.send(f"JOIN #{self.CHANNEL}\r\n".encode('utf-8'))
            
            logger.info(f"‚úÖ –ë–æ—Ç {self.NICK} –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –∫–∞–Ω–∞–ª—É {self.CHANNEL}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitch: {e}")
            return False
    
    def is_stream_live(self) -> bool:
        return True

    def send_message(self, message: str):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Unicode"""
        try:
            if not self.irc:
                logger.warning("IRC –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                return
            
            # Twitch –æ–±–º–µ–∂—É—î —à–≤–∏–¥–∫—ñ—Å—Ç—å ~20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ 30 —Å–µ–∫
            # –†–æ–±–∏–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –ø–∞—É–∑—É –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            time.sleep(0.5)

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —á–∞—Ç
            self.irc.send(f"PRIVMSG #{self.CHANNEL} :{message}\r\n".encode('utf-8'))

            logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {message}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    def clean_old_elo_records(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å)"""
        if not os.path.exists(self.ELO_FILE):
            return
            
        try:
            with open(self.ELO_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
            
            today = datetime.datetime.now(self.TIMEZONE).date()
            history = [
                entry for entry in history 
                if datetime.datetime.fromisoformat(entry['timestamp']).date() >= today
            ]
            
            with open(self.ELO_FILE, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
                
            logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –≤ {self.ELO_FILE}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ Elo –∑–∞–ø–∏—Å—ñ–≤: {e}")
    
    def save_elo_record(self, elo: int):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É Elo –∑ —á–∞—Å–æ–≤–æ—é –º—ñ—Ç–∫–æ—é"""
        timestamp = datetime.datetime.now(self.TIMEZONE).isoformat()
        data = {"elo": elo, "timestamp": timestamp}
        
        try:
            # –ß–∏—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á—É —ñ—Å—Ç–æ—Ä—ñ—é
            if os.path.exists(self.ELO_FILE):
                with open(self.ELO_FILE, 'r', encoding='utf-8') as f:
                    history = json.load(f)
            else:
                history = []
            
            history.append(data)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
            with open(self.ELO_FILE, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
                
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ Elo: {elo} –Ω–∞ —á–∞—Å {timestamp}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ Elo: {e}")
    
    def get_daily_elo_change(self) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ Elo –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å –±–µ–∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç–æ–≤–∏—Ö –Ω—É–ª—ñ–≤"""
        if not os.path.exists(self.ELO_FILE):
            logger.info("–§–∞–π–ª —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–µ —ñ—Å–Ω—É—î, –¥–µ–Ω–Ω–∞ –∑–º—ñ–Ω–∞ = 0")
            return 0
    
        try:
            with open(self.ELO_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
    
            if not history:
                logger.info("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è, –¥–µ–Ω–Ω–∞ –∑–º—ñ–Ω–∞ = 0")
                return 0
    
            today = datetime.datetime.now(self.TIMEZONE).date()
            daily_records = [
                entry for entry in history 
                if datetime.datetime.fromisoformat(entry['timestamp']).date() == today
            ]
    
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —ñ–∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º 0 Elo
            while daily_records and daily_records[0]['elo'] == 0:
                daily_records.pop(0)
    
            if len(daily_records) < 2:
                logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–º—ñ–Ω–∏")
                return 0
    
            first_elo = daily_records[0]['elo']
            latest_elo = daily_records[-1]['elo']
            change = latest_elo - first_elo
    
            logger.info(f"–î–µ–Ω–Ω–∞ –∑–º—ñ–Ω–∞ Elo: {latest_elo} - {first_elo} = {change}")
            return change

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó Elo: {e}")
            return 0
    
    def get_faceit_stats(self, nickname: str) -> Dict[str, int]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ FACEIT API"""
        headers = {'Authorization': f'Bearer {self.FACEIT_API_KEY}'}
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–≤—Ü—è
            player_url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
            response = requests.get(player_url, headers=headers, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API players: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return self._get_empty_stats()
            
            player_data = response.json()
            player_id = player_data.get('player_id')
            
            if not player_id:
                logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ player_id")
                return self._get_empty_stats()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ Elo
            cs2_stats = player_data.get('games', {}).get('cs2', {})
            elo = cs2_stats.get('faceit_elo', 0)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Ç—á—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            wins, losses = self._get_daily_matches(player_id, headers)
            
            stats = {'Elo': elo, 'Win': wins, 'Lose': losses}
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {stats}")
            return stats
            
        except requests.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ FACEIT API: {e}")
            return self._get_empty_stats()
        except Exception as e:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return self._get_empty_stats()
    
    def _get_daily_matches(self, player_id: str, headers: Dict[str, str]) -> tuple[int, int]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å (–∫–æ—Ä–µ–∫—Ü—ñ—è –∑ UTC)"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UTC –¥–ª—è API
            today_utc = datetime.datetime.utcnow().date()
            from_time = int(datetime.datetime.combine(today_utc, datetime.time(0, 0)).timestamp())
            to_time = int(datetime.datetime.utcnow().timestamp())
            
            logger.info(f"üîç –ü–æ—à—É–∫ –º–∞—Ç—á—ñ–≤ –∑ {datetime.datetime.utcfromtimestamp(from_time)} –¥–æ {datetime.datetime.utcfromtimestamp(to_time)} (UTC)")
            
            matches_url = f"https://open.faceit.com/data/v4/players/{player_id}/history"
            params = {'game': 'cs2', 'from': from_time, 'to': to_time, 'limit': 100}  # –∑–±—ñ–ª—å—à–µ–Ω–∏–π –ª—ñ–º—ñ—Ç
            
            response = requests.get(matches_url, headers=headers, params=params, timeout=15)
            if response.status_code != 200:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API matches: —Å—Ç–∞—Ç—É—Å {response.status_code}, –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
                return 0, 0
            
            matches_data = response.json()
            matches = matches_data.get('items', [])
            logger.info(f"üìà –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á—ñ–≤: {len(matches)}")
            
            wins = 0
            losses = 0
            
            for i, match in enumerate(matches):
                logger.info(f"üéÆ –û–±—Ä–æ–±–∫–∞ –º–∞—Ç—á—É {i+1}/{len(matches)} - {match.get('match_id')}")
                result = self._analyze_match(match, player_id)
                if result == "win":
                    wins += 1
                elif result == "loss":
                    losses += 1
            
            logger.info(f"üìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –¥–µ–Ω—å: Wins={wins}, Losses={losses}")
            return wins, losses
        
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–∞—Ç—á—ñ–≤: {e}")
            return 0, 0

    def _analyze_match(self, match: Dict, player_id: str) -> str:
        try:
            if match.get("status") != "finished":
                return "unknown"

            teams = match.get("teams", {})
            results = match.get("results", {})

            # 1. –ó–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≥—Ä–∞–≤—Ü—è
            player_team = None
            for faction, team_data in teams.items():
                for p in team_data.get("players", []):
                    if p.get("player_id") == player_id:
                        player_team = faction
                        break
                if player_team:
                    break

            if not player_team:
                return "unknown"

            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            winner = results.get("winner")
            if not winner:
                return "unknown"

            return "win" if player_team == winner else "loss"

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –º–∞—Ç—á—É: {e}")
            return "unknown"


    def _get_recent_matches_fallback(self, player_id: str, headers: Dict[str, str]) -> tuple[int, int]:
        """–ó–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ"""
        try:
            logger.info("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—á—ñ–≤")
            
            # –û—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ
            end_date = datetime.datetime.now(self.TIMEZONE)
            start_date = end_date - datetime.timedelta(days=3)
            
            from_time = int(start_date.timestamp())
            to_time = int(end_date.timestamp())
            
            matches_url = f"https://open.faceit.com/data/v4/players/{player_id}/history"
            params = {
                'game': 'cs2',
                'from': from_time,
                'to': to_time,
                'limit': 50
            }
            
            response = requests.get(matches_url, headers=headers, params=params, timeout=15)
            
            if response.status_code != 200:
                logger.error(f"–ó–∞–ø–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–∂ –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
                return 0, 0
            
            matches_data = response.json()
            matches = matches_data.get('items', [])
            
            logger.info(f"üìà –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ: {len(matches)}")
            
            if matches:
                logger.info("–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –º–∞—Ç—á—É:")
                logger.info(json.dumps(matches[0], indent=2))
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            return 0, 0
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∞—Å–Ω–æ–º—É –º–µ—Ç–æ–¥—ñ: {e}")
            return 0, 0
    
    def _get_empty_stats(self) -> Dict[str, int]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏"""
        return {'Elo': 0, 'Win': 0, 'Lose': 0}
    
    def handle_command(self, username: str, message: str):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        message = message.lower().strip()
        
        if message == '!elo':
            self._handle_elo_command(username)
        elif message == '!checkelo':
            self._handle_checkelo_command(username)
        elif message == '!debug':
            self._handle_debug_command(username)
        elif message == '!testapi':
            self._handle_testapi_command(username)
    
    def _handle_elo_command(self, username: str):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !elo –∑ —Ñ–æ–Ω–æ–≤–æ—é –æ–±—Ä–æ–±–∫–æ—é —Ç–∞ cooldown"""
        import threading
        import time

        current_time = time.time()

        # –Ø–∫—â–æ cooldown —â–µ –Ω–µ –ø—Ä–æ–π—à–æ–≤
        if current_time - self.last_elo_time < self.elo_cooldown:
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ !elo –≤—ñ–¥ {username} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ (cooldown)")
            return

        # –Ø–∫—â–æ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫
        if hasattr(self, 'pending_elo_thread') and self.pending_elo_thread and self.pending_elo_thread.is_alive():
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ !elo –≤—ñ–¥ {username} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ (—Ñ–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î)")
            return

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –æ–±—Ä–æ–±–∫—É
        self.pending_elo_thread = threading.Thread(target=self._process_elo, args=(username,))
        self.pending_elo_thread.start()

    def _process_elo(self, username: str):
        """–§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        import time

        try:
            stats = self.get_faceit_stats(self.FACEIT_NICK)
            daily_change = self.get_daily_elo_change()

            if stats['Elo'] > 0:
                self.save_elo_record(stats['Elo'])

            change_str = f"+{daily_change}" if daily_change > 0 else str(daily_change)

            response = (
                f"@{username} ‚Üí Elo: {stats['Elo']} | "
                f"Win: {stats['Win']} | "
                f"Lose: {stats['Lose']} | "
                f"{change_str}"
            )

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {username}")
            self.send_message(response)

            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            self.last_elo_time = time.time()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ !elo: {e}")


    def _process_elo(self, username: str):
        """–§–æ–Ω–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_faceit_stats(self.FACEIT_NICK)
        daily_change = self.get_daily_elo_change()

        if stats['Elo'] > 0:
            self.save_elo_record(stats['Elo'])

        change_str = f"+{daily_change}" if daily_change > 0 else str(daily_change)

        response = (
            f"@{username} ‚Üí Elo: {stats['Elo']} | "
            f"Win: {stats['Win']} | "
            f"Lose: {stats['Lose']} | "
            f"{change_str}"
        )

        self.send_message(response)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
        self.last_elo_time = time.time()


    def _handle_checkelo_command(self, username: str):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !checkelo (–≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å)"""
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !checkelo –≤—ñ–¥ {username}")
        
        stats = self.get_faceit_stats(self.FACEIT_NICK)
        daily_change = self.get_daily_elo_change()
        
        print(f"\n=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è @{username} ===")
        print(f"–ü–æ—Ç–æ—á–Ω–µ Elo: {stats['Elo']}")
        print(f"Win (—Å—å–æ–≥–æ–¥–Ω—ñ): {stats['Win']}")
        print(f"Lose (—Å—å–æ–≥–æ–¥–Ω—ñ): {stats['Lose']}")
        print(f"–î–µ–Ω–Ω–∞ –∑–º—ñ–Ω–∞ Elo: {'+' if daily_change >= 0 else ''}{daily_change}")
        print("=" * 35)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —è–∫—â–æ Win/Lose = 0
        if stats['Win'] == 0 and stats['Lose'] == 0:
            print("\n‚ö†Ô∏è  –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: Win —Ç–∞ Lose = 0")
            print("–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:")
            print("1. –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –±—É–ª–æ –∑—ñ–≥—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –º–∞—Ç—á—É")
            print("2. –ú–∞—Ç—á—ñ —â–µ –Ω–µ –æ–±—Ä–æ–±–∏–ª–∏—Å—å API FACEIT")
            print("3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π nickname –∞–±–æ player_id")
            print("4. –ü—Ä–æ–±–ª–µ–º–∞ –∑ —á–∞—Å–æ–≤–∏–º –ø–æ—è—Å–æ–º")
            print("5. API –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")
            print("\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
            print("=" * 50)
    
    def _handle_test_command(self, username: str):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !test"""
        self.send_message(f"@{username} –ë–æ—Ç –ø—Ä–∞—Ü—é—î! ‚úÖ")
    
    def _handle_debug_command(self, username: str):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !debug - –¥–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ !debug –≤—ñ–¥ {username}")
        
        headers = {'Authorization': f'Bearer {self.FACEIT_API_KEY}'}
        
        try:
            # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ player endpoint
            player_url = f"https://open.faceit.com/data/v4/players?nickname={self.FACEIT_NICK}"
            response = requests.get(player_url, headers=headers, timeout=10)
            
            print(f"\n=== DEBUG –¥–ª—è @{username} ===")
            print(f"1. Player API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                player_data = response.json()
                player_id = player_data.get('player_id')
                print(f"   Player ID: {player_id}")
                print(f"   Nickname: {player_data.get('nickname')}")
                
                cs2_stats = player_data.get('games', {}).get('cs2', {})
                print(f"   CS2 Elo: {cs2_stats.get('faceit_elo', 'N/A')}")
                
                # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ matches endpoint
                if player_id:
                    today = datetime.datetime.now(self.TIMEZONE)
                    yesterday = today - datetime.timedelta(days=1)
                    
                    from_time = int(yesterday.timestamp())
                    to_time = int(today.timestamp())
                    
                    matches_url = f"https://open.faceit.com/data/v4/players/{player_id}/history"
                    params = {'game': 'cs2', 'from': from_time, 'to': to_time, 'limit': 10}
                    
                    matches_response = requests.get(matches_url, headers=headers, params=params, timeout=10)
                    print(f"2. Matches API —Å—Ç–∞—Ç—É—Å: {matches_response.status_code}")
                    
                    if matches_response.status_code == 200:
                        matches_data = matches_response.json()
                        matches = matches_data.get('items', [])
                        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É: {len(matches)}")
                        
                        if matches:
                            print("   –û—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á:")
                            last_match = matches[0]
                            print(f"     Match ID: {last_match.get('match_id')}")
                            print(f"     –°—Ç–∞—Ç—É—Å: {last_match.get('status')}")
                            print(f"     –î–∞—Ç–∞: {last_match.get('started_at')}")
                    else:
                        print(f"   –ü–æ–º–∏–ª–∫–∞ matches API: {matches_response.text}")
            else:
                print(f"   –ü–æ–º–∏–ª–∫–∞ player API: {response.text}")
            
            print("=" * 40)
            
        except Exception as e:
            print(f"Debug –ø–æ–º–∏–ª–∫–∞: {e}")
    
    def _handle_testapi_command(self, username: str):
        """–¢–µ—Å—Ç API –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        logger.info(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –¥–ª—è {username}")
        
        headers = {'Authorization': f'Bearer {self.FACEIT_API_KEY}'}
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ player_id
            player_url = f"https://open.faceit.com/data/v4/players?nickname={self.FACEIT_NICK}"
            response = requests.get(player_url, headers=headers, timeout=10)
            
            if response.status_code != 200:
                self.send_message(f"@{username} API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
                return
            
            player_data = response.json()
            player_id = player_data.get('player_id')
            
            if not player_id:
                self.send_message(f"@{username} Player ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏
            now = datetime.datetime.now(self.TIMEZONE)
            periods = [
                ("–°—å–æ–≥–æ–¥–Ω—ñ", 0),
                ("–í—á–æ—Ä–∞", 1),
                ("2 –¥–Ω—ñ —Ç–æ–º—É", 2),
                ("–¢–∏–∂–¥–µ–Ω—å", 7)
            ]
            
            for period_name, days_ago in periods:
                start_date = now - datetime.timedelta(days=days_ago+1)
                end_date = now - datetime.timedelta(days=days_ago) if days_ago > 0 else now
                
                from_time = int(start_date.timestamp())
                to_time = int(end_date.timestamp())
                
                matches_url = f"https://open.faceit.com/data/v4/players/{player_id}/history"
                params = {'game': 'cs2', 'from': from_time, 'to': to_time, 'limit': 20}
                
                matches_response = requests.get(matches_url, headers=headers, params=params, timeout=10)
                
                if matches_response.status_code == 200:
                    matches_data = matches_response.json()
                    matches_count = len(matches_data.get('items', []))
                    print(f"{period_name}: {matches_count} –º–∞—Ç—á—ñ–≤")
                else:
                    print(f"{period_name}: API –ø–æ–º–∏–ª–∫–∞ {matches_response.status_code}")
            
            self.send_message(f"@{username} –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å")
            
        except Exception as e:
            self.send_message(f"@{username} –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É API: {e}")
            logger.error(f"API test –ø–æ–º–∏–ª–∫–∞: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç—Ä—ñ–º—É"""
        self.running = True
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...")

        while self.running:
            try:
                if not self.is_stream_live():
                    logger.info("–°—Ç—Ä—ñ–º –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ë–æ—Ç —á–µ–∫–∞—î...")
                    time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                    continue

                if not self.connect_to_twitch():
                    logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Twitch")
                    time.sleep(10)
                    continue

                self.clean_old_elo_records()

                while self.running and self.is_stream_live():
                    try:
                        response = self.irc.recv(2048).decode('utf-8', errors='ignore')
                        if not response:
                            logger.warning("–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                            self._reconnect()
                            continue

                        if response.startswith('PING'):
                            self.irc.send("PONG\r\n".encode('utf-8'))
                            continue

                        if "PRIVMSG" in response:
                            self._parse_message(response)

                    except (socket.timeout, ConnectionResetError, ConnectionAbortedError) as e:
                        logger.warning(f"–†–æ–∑—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}, –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                        self._reconnect()
                        time.sleep(5)
                    except requests.RequestException as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ API: {e}, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
                        time.sleep(5)
                    except Exception as e:
                        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                        time.sleep(1)

                logger.info("–°—Ç—Ä—ñ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç—Ä—ñ–º—É...")
                if self.irc:
                    self.irc.close()
                time.sleep(60)

            except KeyboardInterrupt:
                logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
                self.stop()
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ run: {e}")
                time.sleep(5)

    
    def _parse_message(self, response: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É"""
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            username = response.split('!', 1)[0][1:]
            message = response.split('PRIVMSG', 1)[1].split(':', 1)[1].strip()
            
            logger.info(f"{username}: {message}")
            self.handle_command(username, message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    def _reconnect(self):
        """–ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitch"""
        try:
            if self.irc:
                self.irc.close()
            time.sleep(5)
            self.connect_to_twitch()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ: {e}")
    
    def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        if self.irc:
            self.irc.close()
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = TwitchFACEITBot()
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
        bot.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        bot.stop()

if __name__ == "__main__":

    main()



